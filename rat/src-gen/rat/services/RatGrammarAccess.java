/*
 * generated by Xtext 2.12.0
 */
package rat.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RatGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rat.Rat.Prog");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunFunParserRuleCall_0_0 = (RuleCall)cFunAssignment_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cBlocAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlocBlocParserRuleCall_2_0 = (RuleCall)cBlocAssignment_2.eContents().get(0);
		
		//Prog:
		//	fun+=Fun* ID bloc=Bloc;
		@Override public ParserRule getRule() { return rule; }
		
		//fun+=Fun* ID bloc=Bloc
		public Group getGroup() { return cGroup; }
		
		//fun+=Fun*
		public Assignment getFunAssignment_0() { return cFunAssignment_0; }
		
		//Fun
		public RuleCall getFunFunParserRuleCall_0_0() { return cFunFunParserRuleCall_0_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//bloc=Bloc
		public Assignment getBlocAssignment_2() { return cBlocAssignment_2; }
		
		//Bloc
		public RuleCall getBlocBlocParserRuleCall_2_0() { return cBlocBlocParserRuleCall_2_0; }
	}
	public class FunElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rat.Rat.Fun");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomIDTerminalRuleCall_1_0 = (RuleCall)cNomAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParamAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParamDPParserRuleCall_3_0 = (RuleCall)cParamAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cIsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cIsIParserRuleCall_6_0 = (RuleCall)cIsAssignment_6.eContents().get(0);
		private final Keyword cReturnKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cEAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cEEParserRuleCall_8_0 = (RuleCall)cEAssignment_8.eContents().get(0);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		///* Prog : Fun* ID Bloc */ Fun:
		//	type=Type nom=ID '(' param+=DP* ')' '{' is+=I* 'return' e=E ';' '}';
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type nom=ID '(' param+=DP* ')' '{' is+=I* 'return' e=E ';' '}'
		public Group getGroup() { return cGroup; }
		
		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//nom=ID
		public Assignment getNomAssignment_1() { return cNomAssignment_1; }
		
		//ID
		public RuleCall getNomIDTerminalRuleCall_1_0() { return cNomIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//param+=DP*
		public Assignment getParamAssignment_3() { return cParamAssignment_3; }
		
		//DP
		public RuleCall getParamDPParserRuleCall_3_0() { return cParamDPParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//is+=I*
		public Assignment getIsAssignment_6() { return cIsAssignment_6; }
		
		//I
		public RuleCall getIsIParserRuleCall_6_0() { return cIsIParserRuleCall_6_0; }
		
		//'return'
		public Keyword getReturnKeyword_7() { return cReturnKeyword_7; }
		
		//e=E
		public Assignment getEAssignment_8() { return cEAssignment_8; }
		
		//E
		public RuleCall getEEParserRuleCall_8_0() { return cEEParserRuleCall_8_0; }
		
		//';'
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class BlocElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rat.Rat.Bloc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlocAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIsIParserRuleCall_2_0 = (RuleCall)cIsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Bloc:
		//	{Bloc} '{' is+=I* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Bloc} '{' is+=I* '}'
		public Group getGroup() { return cGroup; }
		
		//{Bloc}
		public Action getBlocAction_0() { return cBlocAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//is+=I*
		public Assignment getIsAssignment_2() { return cIsAssignment_2; }
		
		//I
		public RuleCall getIsIParserRuleCall_2_0() { return cIsIParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class IElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rat.Rat.I");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAffectationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstanteParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPrintParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cConditionnelleParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTantqueParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		///* { I* } */ I:
		//	Declaration
		//	| Affectation
		//	| Constante
		//	| Print
		//	| Conditionnelle
		//	| Tantque;
		@Override public ParserRule getRule() { return rule; }
		
		//Declaration | Affectation | Constante | Print | Conditionnelle | Tantque
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Declaration
		public RuleCall getDeclarationParserRuleCall_0() { return cDeclarationParserRuleCall_0; }
		
		//Affectation
		public RuleCall getAffectationParserRuleCall_1() { return cAffectationParserRuleCall_1; }
		
		//Constante
		public RuleCall getConstanteParserRuleCall_2() { return cConstanteParserRuleCall_2; }
		
		//Print
		public RuleCall getPrintParserRuleCall_3() { return cPrintParserRuleCall_3; }
		
		//Conditionnelle
		public RuleCall getConditionnelleParserRuleCall_4() { return cConditionnelleParserRuleCall_4; }
		
		//Tantque
		public RuleCall getTantqueParserRuleCall_5() { return cTantqueParserRuleCall_5; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rat.Rat.Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomIDTerminalRuleCall_1_0 = (RuleCall)cNomAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEEParserRuleCall_3_0 = (RuleCall)cEAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Declaration:
		//	type=Type nom=ID '=' e=E ';' /* Type ID = E */;
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type nom=ID '=' e=E ';'
		public Group getGroup() { return cGroup; }
		
		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//nom=ID
		public Assignment getNomAssignment_1() { return cNomAssignment_1; }
		
		//ID
		public RuleCall getNomIDTerminalRuleCall_1_0() { return cNomIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//e=E
		public Assignment getEAssignment_3() { return cEAssignment_3; }
		
		//E
		public RuleCall getEEParserRuleCall_3_0() { return cEEParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class AffectationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rat.Rat.Affectation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNomAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNomIDTerminalRuleCall_0_0 = (RuleCall)cNomAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEEParserRuleCall_2_0 = (RuleCall)cEAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Affectation:
		//	nom=ID '=' e=E ';' /* ID = E */;
		@Override public ParserRule getRule() { return rule; }
		
		//nom=ID '=' e=E ';'
		public Group getGroup() { return cGroup; }
		
		//nom=ID
		public Assignment getNomAssignment_0() { return cNomAssignment_0; }
		
		//ID
		public RuleCall getNomIDTerminalRuleCall_0_0() { return cNomIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//e=E
		public Assignment getEAssignment_2() { return cEAssignment_2; }
		
		//E
		public RuleCall getEEParserRuleCall_2_0() { return cEEParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ConstanteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rat.Rat.Constante");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomIDTerminalRuleCall_1_0 = (RuleCall)cNomAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEINTTerminalRuleCall_3_0 = (RuleCall)cEAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Constante:
		//	'const' nom=ID '=' e=INT ';' /* const ID = INT */;
		@Override public ParserRule getRule() { return rule; }
		
		//'const' nom=ID '=' e=INT ';'
		public Group getGroup() { return cGroup; }
		
		//'const'
		public Keyword getConstKeyword_0() { return cConstKeyword_0; }
		
		//nom=ID
		public Assignment getNomAssignment_1() { return cNomAssignment_1; }
		
		//ID
		public RuleCall getNomIDTerminalRuleCall_1_0() { return cNomIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//e=INT
		public Assignment getEAssignment_3() { return cEAssignment_3; }
		
		//INT
		public RuleCall getEINTTerminalRuleCall_3_0() { return cEINTTerminalRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class PrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rat.Rat.Print");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEEParserRuleCall_1_0 = (RuleCall)cEAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Print:
		//	'print' e=E ';' /* print E */;
		@Override public ParserRule getRule() { return rule; }
		
		//'print' e=E ';'
		public Group getGroup() { return cGroup; }
		
		//'print'
		public Keyword getPrintKeyword_0() { return cPrintKeyword_0; }
		
		//e=E
		public Assignment getEAssignment_1() { return cEAssignment_1; }
		
		//E
		public RuleCall getEEParserRuleCall_1_0() { return cEEParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ConditionnelleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rat.Rat.Conditionnelle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEEParserRuleCall_1_0 = (RuleCall)cEAssignment_1.eContents().get(0);
		private final Assignment cBloc1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBloc1BlocParserRuleCall_2_0 = (RuleCall)cBloc1Assignment_2.eContents().get(0);
		private final Keyword cElseKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBloc2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBloc2BlocParserRuleCall_4_0 = (RuleCall)cBloc2Assignment_4.eContents().get(0);
		
		//Conditionnelle:
		//	'if' e=E bloc1=Bloc 'else' bloc2=Bloc;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' e=E bloc1=Bloc 'else' bloc2=Bloc
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//e=E
		public Assignment getEAssignment_1() { return cEAssignment_1; }
		
		//E
		public RuleCall getEEParserRuleCall_1_0() { return cEEParserRuleCall_1_0; }
		
		//bloc1=Bloc
		public Assignment getBloc1Assignment_2() { return cBloc1Assignment_2; }
		
		//Bloc
		public RuleCall getBloc1BlocParserRuleCall_2_0() { return cBloc1BlocParserRuleCall_2_0; }
		
		//'else'
		public Keyword getElseKeyword_3() { return cElseKeyword_3; }
		
		//bloc2=Bloc
		public Assignment getBloc2Assignment_4() { return cBloc2Assignment_4; }
		
		//Bloc
		public RuleCall getBloc2BlocParserRuleCall_4_0() { return cBloc2BlocParserRuleCall_4_0; }
	}
	public class TantqueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rat.Rat.Tantque");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEEParserRuleCall_1_0 = (RuleCall)cEAssignment_1.eContents().get(0);
		private final Assignment cBlocAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlocBlocParserRuleCall_2_0 = (RuleCall)cBlocAssignment_2.eContents().get(0);
		
		//Tantque:
		//	'while' e=E bloc=Bloc;
		@Override public ParserRule getRule() { return rule; }
		
		//'while' e=E bloc=Bloc
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//e=E
		public Assignment getEAssignment_1() { return cEAssignment_1; }
		
		//E
		public RuleCall getEEParserRuleCall_1_0() { return cEEParserRuleCall_1_0; }
		
		//bloc=Bloc
		public Assignment getBlocAssignment_2() { return cBlocAssignment_2; }
		
		//Bloc
		public RuleCall getBlocBlocParserRuleCall_2_0() { return cBlocBlocParserRuleCall_2_0; }
	}
	public class DPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rat.Rat.DP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		
		//DP:
		//	type=Type id=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type id=ID
		public Group getGroup() { return cGroup; }
		
		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rat.Rat.Type");
		private final Assignment cTAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTAlternatives_0 = (Alternatives)cTAssignment.eContents().get(0);
		private final Keyword cTBoolKeyword_0_0 = (Keyword)cTAlternatives_0.eContents().get(0);
		private final Keyword cTIntKeyword_0_1 = (Keyword)cTAlternatives_0.eContents().get(1);
		private final Keyword cTRatKeyword_0_2 = (Keyword)cTAlternatives_0.eContents().get(2);
		
		//Type:
		//	t=('bool'
		//	| 'int'
		//	| 'rat');
		@Override public ParserRule getRule() { return rule; }
		
		//t=('bool' | 'int' | 'rat')
		public Assignment getTAssignment() { return cTAssignment; }
		
		//('bool' | 'int' | 'rat')
		public Alternatives getTAlternatives_0() { return cTAlternatives_0; }
		
		//'bool'
		public Keyword getTBoolKeyword_0_0() { return cTBoolKeyword_0_0; }
		
		//'int'
		public Keyword getTIntKeyword_0_1() { return cTIntKeyword_0_1; }
		
		//'rat'
		public Keyword getTRatKeyword_0_2() { return cTRatKeyword_0_2; }
	}
	public class CPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rat.Rat.CP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCPAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cEAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEEParserRuleCall_1_0 = (RuleCall)cEAssignment_1.eContents().get(0);
		
		//CP:
		//	{CP} e+=E*;
		@Override public ParserRule getRule() { return rule; }
		
		//{CP} e+=E*
		public Group getGroup() { return cGroup; }
		
		//{CP}
		public Action getCPAction_0() { return cCPAction_0; }
		
		//e+=E*
		public Assignment getEAssignment_1() { return cEAssignment_1; }
		
		//E
		public RuleCall getEEParserRuleCall_1_0() { return cEEParserRuleCall_1_0; }
	}
	public class EElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rat.Rat.E");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAppelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRationnelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNumerateurParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDenominateurParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIdentificateurParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBooleanParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cEntierParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cOpBinParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//E:
		//	Appel
		//	| Rationnel
		//	| Numerateur
		//	| Denominateur
		//	| Identificateur
		//	| Boolean
		//	| Entier
		//	| OpBin;
		@Override public ParserRule getRule() { return rule; }
		
		//Appel | Rationnel | Numerateur | Denominateur | Identificateur | Boolean | Entier | OpBin
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Appel
		public RuleCall getAppelParserRuleCall_0() { return cAppelParserRuleCall_0; }
		
		//Rationnel
		public RuleCall getRationnelParserRuleCall_1() { return cRationnelParserRuleCall_1; }
		
		//Numerateur
		public RuleCall getNumerateurParserRuleCall_2() { return cNumerateurParserRuleCall_2; }
		
		//Denominateur
		public RuleCall getDenominateurParserRuleCall_3() { return cDenominateurParserRuleCall_3; }
		
		//Identificateur
		public RuleCall getIdentificateurParserRuleCall_4() { return cIdentificateurParserRuleCall_4; }
		
		//Boolean
		public RuleCall getBooleanParserRuleCall_5() { return cBooleanParserRuleCall_5; }
		
		//Entier
		public RuleCall getEntierParserRuleCall_6() { return cEntierParserRuleCall_6; }
		
		//OpBin
		public RuleCall getOpBinParserRuleCall_7() { return cOpBinParserRuleCall_7; }
	}
	public class AppelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rat.Rat.Appel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomIDTerminalRuleCall_1_0 = (RuleCall)cNomAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParamAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParamCPParserRuleCall_3_0 = (RuleCall)cParamAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Appel:
		//	'call' nom=ID '(' param+=CP ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'call' nom=ID '(' param+=CP ')'
		public Group getGroup() { return cGroup; }
		
		//'call'
		public Keyword getCallKeyword_0() { return cCallKeyword_0; }
		
		//nom=ID
		public Assignment getNomAssignment_1() { return cNomAssignment_1; }
		
		//ID
		public RuleCall getNomIDTerminalRuleCall_1_0() { return cNomIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//param+=CP
		public Assignment getParamAssignment_3() { return cParamAssignment_3; }
		
		//CP
		public RuleCall getParamCPParserRuleCall_3_0() { return cParamCPParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class RationnelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rat.Rat.Rationnel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cE1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cE1EParserRuleCall_1_0 = (RuleCall)cE1Assignment_1.eContents().get(0);
		private final Keyword cSolidusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cE2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cE2EParserRuleCall_3_0 = (RuleCall)cE2Assignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Rationnel:
		//	'[' e1=E '/' e2=E ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' e1=E '/' e2=E ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//e1=E
		public Assignment getE1Assignment_1() { return cE1Assignment_1; }
		
		//E
		public RuleCall getE1EParserRuleCall_1_0() { return cE1EParserRuleCall_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_2() { return cSolidusKeyword_2; }
		
		//e2=E
		public Assignment getE2Assignment_3() { return cE2Assignment_3; }
		
		//E
		public RuleCall getE2EParserRuleCall_3_0() { return cE2EParserRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class NumerateurElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rat.Rat.Numerateur");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEEParserRuleCall_1_0 = (RuleCall)cEAssignment_1.eContents().get(0);
		
		//Numerateur:
		//	'num' e=E;
		@Override public ParserRule getRule() { return rule; }
		
		//'num' e=E
		public Group getGroup() { return cGroup; }
		
		//'num'
		public Keyword getNumKeyword_0() { return cNumKeyword_0; }
		
		//e=E
		public Assignment getEAssignment_1() { return cEAssignment_1; }
		
		//E
		public RuleCall getEEParserRuleCall_1_0() { return cEEParserRuleCall_1_0; }
	}
	public class DenominateurElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rat.Rat.Denominateur");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDenomKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEEParserRuleCall_1_0 = (RuleCall)cEAssignment_1.eContents().get(0);
		
		//Denominateur:
		//	'denom' e=E;
		@Override public ParserRule getRule() { return rule; }
		
		//'denom' e=E
		public Group getGroup() { return cGroup; }
		
		//'denom'
		public Keyword getDenomKeyword_0() { return cDenomKeyword_0; }
		
		//e=E
		public Assignment getEAssignment_1() { return cEAssignment_1; }
		
		//E
		public RuleCall getEEParserRuleCall_1_0() { return cEEParserRuleCall_1_0; }
	}
	public class IdentificateurElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rat.Rat.Identificateur");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//Identificateur:
		//	id=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//id=ID
		public Assignment getIdAssignment() { return cIdAssignment; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_0() { return cIdIDTerminalRuleCall_0; }
	}
	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rat.Rat.Boolean");
		private final Assignment cBAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cBAlternatives_0 = (Alternatives)cBAssignment.eContents().get(0);
		private final Keyword cBFalseKeyword_0_0 = (Keyword)cBAlternatives_0.eContents().get(0);
		private final Keyword cBTrueKeyword_0_1 = (Keyword)cBAlternatives_0.eContents().get(1);
		
		//Boolean:
		//	b=('false'
		//	| 'true');
		@Override public ParserRule getRule() { return rule; }
		
		//b=('false' | 'true')
		public Assignment getBAssignment() { return cBAssignment; }
		
		//('false' | 'true')
		public Alternatives getBAlternatives_0() { return cBAlternatives_0; }
		
		//'false'
		public Keyword getBFalseKeyword_0_0() { return cBFalseKeyword_0_0; }
		
		//'true'
		public Keyword getBTrueKeyword_0_1() { return cBTrueKeyword_0_1; }
	}
	public class EntierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rat.Rat.Entier");
		private final Assignment cIntAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIntINTTerminalRuleCall_0 = (RuleCall)cIntAssignment.eContents().get(0);
		
		//Entier:
		//	int=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//int=INT
		public Assignment getIntAssignment() { return cIntAssignment; }
		
		//INT
		public RuleCall getIntINTTerminalRuleCall_0() { return cIntINTTerminalRuleCall_0; }
	}
	public class OpBinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rat.Rat.OpBin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cE1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cE1EParserRuleCall_1_0 = (RuleCall)cE1Assignment_1.eContents().get(0);
		private final Assignment cOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpOperandeParserRuleCall_2_0 = (RuleCall)cOpAssignment_2.eContents().get(0);
		private final Assignment cE2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cE2EParserRuleCall_3_0 = (RuleCall)cE2Assignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OpBin:
		//	'(' e1=E op=Operande e2=E ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' e1=E op=Operande e2=E ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//e1=E
		public Assignment getE1Assignment_1() { return cE1Assignment_1; }
		
		//E
		public RuleCall getE1EParserRuleCall_1_0() { return cE1EParserRuleCall_1_0; }
		
		//op=Operande
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }
		
		//Operande
		public RuleCall getOpOperandeParserRuleCall_2_0() { return cOpOperandeParserRuleCall_2_0; }
		
		//e2=E
		public Assignment getE2Assignment_3() { return cE2Assignment_3; }
		
		//E
		public RuleCall getE2EParserRuleCall_3_0() { return cE2EParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class OperandeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rat.Rat.Operande");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpEqualsSignKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final Keyword cOpAsteriskKeyword_0_2 = (Keyword)cOpAlternatives_0.eContents().get(2);
		private final Keyword cOpLessThanSignKeyword_0_3 = (Keyword)cOpAlternatives_0.eContents().get(3);
		
		//Operande:
		//	op=('+'
		//	| '='
		//	| '*'
		//	| '<');
		@Override public ParserRule getRule() { return rule; }
		
		//op=('+' | '=' | '*' | '<')
		public Assignment getOpAssignment() { return cOpAssignment; }
		
		//('+' | '=' | '*' | '<')
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }
		
		//'+'
		public Keyword getOpPlusSignKeyword_0_0() { return cOpPlusSignKeyword_0_0; }
		
		//'='
		public Keyword getOpEqualsSignKeyword_0_1() { return cOpEqualsSignKeyword_0_1; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_0_2() { return cOpAsteriskKeyword_0_2; }
		
		//'<'
		public Keyword getOpLessThanSignKeyword_0_3() { return cOpLessThanSignKeyword_0_3; }
	}
	
	
	private final ProgElements pProg;
	private final FunElements pFun;
	private final BlocElements pBloc;
	private final IElements pI;
	private final DeclarationElements pDeclaration;
	private final AffectationElements pAffectation;
	private final ConstanteElements pConstante;
	private final PrintElements pPrint;
	private final ConditionnelleElements pConditionnelle;
	private final TantqueElements pTantque;
	private final DPElements pDP;
	private final TypeElements pType;
	private final CPElements pCP;
	private final EElements pE;
	private final AppelElements pAppel;
	private final RationnelElements pRationnel;
	private final NumerateurElements pNumerateur;
	private final DenominateurElements pDenominateur;
	private final IdentificateurElements pIdentificateur;
	private final BooleanElements pBoolean;
	private final EntierElements pEntier;
	private final OpBinElements pOpBin;
	private final OperandeElements pOperande;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RatGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProg = new ProgElements();
		this.pFun = new FunElements();
		this.pBloc = new BlocElements();
		this.pI = new IElements();
		this.pDeclaration = new DeclarationElements();
		this.pAffectation = new AffectationElements();
		this.pConstante = new ConstanteElements();
		this.pPrint = new PrintElements();
		this.pConditionnelle = new ConditionnelleElements();
		this.pTantque = new TantqueElements();
		this.pDP = new DPElements();
		this.pType = new TypeElements();
		this.pCP = new CPElements();
		this.pE = new EElements();
		this.pAppel = new AppelElements();
		this.pRationnel = new RationnelElements();
		this.pNumerateur = new NumerateurElements();
		this.pDenominateur = new DenominateurElements();
		this.pIdentificateur = new IdentificateurElements();
		this.pBoolean = new BooleanElements();
		this.pEntier = new EntierElements();
		this.pOpBin = new OpBinElements();
		this.pOperande = new OperandeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("rat.Rat".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Prog:
	//	fun+=Fun* ID bloc=Bloc;
	public ProgElements getProgAccess() {
		return pProg;
	}
	
	public ParserRule getProgRule() {
		return getProgAccess().getRule();
	}
	
	///* Prog : Fun* ID Bloc */ Fun:
	//	type=Type nom=ID '(' param+=DP* ')' '{' is+=I* 'return' e=E ';' '}';
	public FunElements getFunAccess() {
		return pFun;
	}
	
	public ParserRule getFunRule() {
		return getFunAccess().getRule();
	}
	
	//Bloc:
	//	{Bloc} '{' is+=I* '}';
	public BlocElements getBlocAccess() {
		return pBloc;
	}
	
	public ParserRule getBlocRule() {
		return getBlocAccess().getRule();
	}
	
	///* { I* } */ I:
	//	Declaration
	//	| Affectation
	//	| Constante
	//	| Print
	//	| Conditionnelle
	//	| Tantque;
	public IElements getIAccess() {
		return pI;
	}
	
	public ParserRule getIRule() {
		return getIAccess().getRule();
	}
	
	//Declaration:
	//	type=Type nom=ID '=' e=E ';' /* Type ID = E */;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//Affectation:
	//	nom=ID '=' e=E ';' /* ID = E */;
	public AffectationElements getAffectationAccess() {
		return pAffectation;
	}
	
	public ParserRule getAffectationRule() {
		return getAffectationAccess().getRule();
	}
	
	//Constante:
	//	'const' nom=ID '=' e=INT ';' /* const ID = INT */;
	public ConstanteElements getConstanteAccess() {
		return pConstante;
	}
	
	public ParserRule getConstanteRule() {
		return getConstanteAccess().getRule();
	}
	
	//Print:
	//	'print' e=E ';' /* print E */;
	public PrintElements getPrintAccess() {
		return pPrint;
	}
	
	public ParserRule getPrintRule() {
		return getPrintAccess().getRule();
	}
	
	//Conditionnelle:
	//	'if' e=E bloc1=Bloc 'else' bloc2=Bloc;
	public ConditionnelleElements getConditionnelleAccess() {
		return pConditionnelle;
	}
	
	public ParserRule getConditionnelleRule() {
		return getConditionnelleAccess().getRule();
	}
	
	//Tantque:
	//	'while' e=E bloc=Bloc;
	public TantqueElements getTantqueAccess() {
		return pTantque;
	}
	
	public ParserRule getTantqueRule() {
		return getTantqueAccess().getRule();
	}
	
	//DP:
	//	type=Type id=ID;
	public DPElements getDPAccess() {
		return pDP;
	}
	
	public ParserRule getDPRule() {
		return getDPAccess().getRule();
	}
	
	//Type:
	//	t=('bool'
	//	| 'int'
	//	| 'rat');
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//CP:
	//	{CP} e+=E*;
	public CPElements getCPAccess() {
		return pCP;
	}
	
	public ParserRule getCPRule() {
		return getCPAccess().getRule();
	}
	
	//E:
	//	Appel
	//	| Rationnel
	//	| Numerateur
	//	| Denominateur
	//	| Identificateur
	//	| Boolean
	//	| Entier
	//	| OpBin;
	public EElements getEAccess() {
		return pE;
	}
	
	public ParserRule getERule() {
		return getEAccess().getRule();
	}
	
	//Appel:
	//	'call' nom=ID '(' param+=CP ')';
	public AppelElements getAppelAccess() {
		return pAppel;
	}
	
	public ParserRule getAppelRule() {
		return getAppelAccess().getRule();
	}
	
	//Rationnel:
	//	'[' e1=E '/' e2=E ']';
	public RationnelElements getRationnelAccess() {
		return pRationnel;
	}
	
	public ParserRule getRationnelRule() {
		return getRationnelAccess().getRule();
	}
	
	//Numerateur:
	//	'num' e=E;
	public NumerateurElements getNumerateurAccess() {
		return pNumerateur;
	}
	
	public ParserRule getNumerateurRule() {
		return getNumerateurAccess().getRule();
	}
	
	//Denominateur:
	//	'denom' e=E;
	public DenominateurElements getDenominateurAccess() {
		return pDenominateur;
	}
	
	public ParserRule getDenominateurRule() {
		return getDenominateurAccess().getRule();
	}
	
	//Identificateur:
	//	id=ID;
	public IdentificateurElements getIdentificateurAccess() {
		return pIdentificateur;
	}
	
	public ParserRule getIdentificateurRule() {
		return getIdentificateurAccess().getRule();
	}
	
	//Boolean:
	//	b=('false'
	//	| 'true');
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}
	
	//Entier:
	//	int=INT;
	public EntierElements getEntierAccess() {
		return pEntier;
	}
	
	public ParserRule getEntierRule() {
		return getEntierAccess().getRule();
	}
	
	//OpBin:
	//	'(' e1=E op=Operande e2=E ')';
	public OpBinElements getOpBinAccess() {
		return pOpBin;
	}
	
	public ParserRule getOpBinRule() {
		return getOpBinAccess().getRule();
	}
	
	//Operande:
	//	op=('+'
	//	| '='
	//	| '*'
	//	| '<');
	public OperandeElements getOperandeAccess() {
		return pOperande;
	}
	
	public ParserRule getOperandeRule() {
		return getOperandeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

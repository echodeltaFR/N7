/*
 * generated by Xtext 2.16.0
 */
package rat.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import rat.rat.Affectation;
import rat.rat.Appel;
import rat.rat.Bloc;
import rat.rat.Conditionnelle;
import rat.rat.Constante;
import rat.rat.DP;
import rat.rat.Declaration;
import rat.rat.Denominateur;
import rat.rat.Entier;
import rat.rat.Fun;
import rat.rat.Identificateur;
import rat.rat.Numerateur;
import rat.rat.OpBin;
import rat.rat.Operande;
import rat.rat.Print;
import rat.rat.Prog;
import rat.rat.RatPackage;
import rat.rat.Rationnel;
import rat.rat.Tantque;
import rat.rat.Type;
import rat.services.RatGrammarAccess;

@SuppressWarnings("all")
public class RatSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RatGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RatPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RatPackage.AFFECTATION:
				sequence_Affectation(context, (Affectation) semanticObject); 
				return; 
			case RatPackage.APPEL:
				sequence_Appel(context, (Appel) semanticObject); 
				return; 
			case RatPackage.BLOC:
				sequence_Bloc(context, (Bloc) semanticObject); 
				return; 
			case RatPackage.BOOLEAN:
				sequence_Boolean(context, (rat.rat.Boolean) semanticObject); 
				return; 
			case RatPackage.CONDITIONNELLE:
				sequence_Conditionnelle(context, (Conditionnelle) semanticObject); 
				return; 
			case RatPackage.CONSTANTE:
				sequence_Constante(context, (Constante) semanticObject); 
				return; 
			case RatPackage.DP:
				sequence_DP(context, (DP) semanticObject); 
				return; 
			case RatPackage.DECLARATION:
				sequence_Declaration(context, (Declaration) semanticObject); 
				return; 
			case RatPackage.DENOMINATEUR:
				sequence_Denominateur(context, (Denominateur) semanticObject); 
				return; 
			case RatPackage.ENTIER:
				sequence_Entier(context, (Entier) semanticObject); 
				return; 
			case RatPackage.FUN:
				sequence_Fun(context, (Fun) semanticObject); 
				return; 
			case RatPackage.IDENTIFICATEUR:
				sequence_Identificateur(context, (Identificateur) semanticObject); 
				return; 
			case RatPackage.NUMERATEUR:
				sequence_Numerateur(context, (Numerateur) semanticObject); 
				return; 
			case RatPackage.OP_BIN:
				sequence_OpBin(context, (OpBin) semanticObject); 
				return; 
			case RatPackage.OPERANDE:
				sequence_Operande(context, (Operande) semanticObject); 
				return; 
			case RatPackage.PRINT:
				sequence_Print(context, (Print) semanticObject); 
				return; 
			case RatPackage.PROG:
				sequence_Prog(context, (Prog) semanticObject); 
				return; 
			case RatPackage.RATIONNEL:
				sequence_Rationnel(context, (Rationnel) semanticObject); 
				return; 
			case RatPackage.TANTQUE:
				sequence_Tantque(context, (Tantque) semanticObject); 
				return; 
			case RatPackage.TYPE:
				sequence_Type(context, (Type) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     I returns Affectation
	 *     Affectation returns Affectation
	 *
	 * Constraint:
	 *     (nomAff=ID e=E)
	 */
	protected void sequence_Affectation(ISerializationContext context, Affectation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RatPackage.Literals.AFFECTATION__NOM_AFF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RatPackage.Literals.AFFECTATION__NOM_AFF));
			if (transientValues.isValueTransient(semanticObject, RatPackage.Literals.AFFECTATION__E) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RatPackage.Literals.AFFECTATION__E));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAffectationAccess().getNomAffIDTerminalRuleCall_0_0(), semanticObject.getNomAff());
		feeder.accept(grammarAccess.getAffectationAccess().getEEParserRuleCall_2_0(), semanticObject.getE());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     E returns Appel
	 *     Appel returns Appel
	 *
	 * Constraint:
	 *     (nomAppel=ID param+=E*)
	 */
	protected void sequence_Appel(ISerializationContext context, Appel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Bloc returns Bloc
	 *
	 * Constraint:
	 *     is+=I*
	 */
	protected void sequence_Bloc(ISerializationContext context, Bloc semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     E returns Boolean
	 *     Boolean returns Boolean
	 *
	 * Constraint:
	 *     (val='false' | val='true')
	 */
	protected void sequence_Boolean(ISerializationContext context, rat.rat.Boolean semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     I returns Conditionnelle
	 *     Conditionnelle returns Conditionnelle
	 *
	 * Constraint:
	 *     (condc=E bloc1cond=Bloc bloc2cond=Bloc)
	 */
	protected void sequence_Conditionnelle(ISerializationContext context, Conditionnelle semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RatPackage.Literals.CONDITIONNELLE__CONDC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RatPackage.Literals.CONDITIONNELLE__CONDC));
			if (transientValues.isValueTransient(semanticObject, RatPackage.Literals.CONDITIONNELLE__BLOC1COND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RatPackage.Literals.CONDITIONNELLE__BLOC1COND));
			if (transientValues.isValueTransient(semanticObject, RatPackage.Literals.CONDITIONNELLE__BLOC2COND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RatPackage.Literals.CONDITIONNELLE__BLOC2COND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConditionnelleAccess().getCondcEParserRuleCall_1_0(), semanticObject.getCondc());
		feeder.accept(grammarAccess.getConditionnelleAccess().getBloc1condBlocParserRuleCall_2_0(), semanticObject.getBloc1cond());
		feeder.accept(grammarAccess.getConditionnelleAccess().getBloc2condBlocParserRuleCall_4_0(), semanticObject.getBloc2cond());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     I returns Constante
	 *     Constante returns Constante
	 *
	 * Constraint:
	 *     (nomConst=ID val=INT)
	 */
	protected void sequence_Constante(ISerializationContext context, Constante semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RatPackage.Literals.CONSTANTE__NOM_CONST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RatPackage.Literals.CONSTANTE__NOM_CONST));
			if (transientValues.isValueTransient(semanticObject, RatPackage.Literals.CONSTANTE__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RatPackage.Literals.CONSTANTE__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConstanteAccess().getNomConstIDTerminalRuleCall_1_0(), semanticObject.getNomConst());
		feeder.accept(grammarAccess.getConstanteAccess().getValINTTerminalRuleCall_3_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DP returns DP
	 *
	 * Constraint:
	 *     (type=Type id=ID)
	 */
	protected void sequence_DP(ISerializationContext context, DP semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RatPackage.Literals.DP__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RatPackage.Literals.DP__TYPE));
			if (transientValues.isValueTransient(semanticObject, RatPackage.Literals.DP__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RatPackage.Literals.DP__ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDPAccess().getTypeTypeParserRuleCall_0_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getDPAccess().getIdIDTerminalRuleCall_1_0(), semanticObject.getId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     I returns Declaration
	 *     Declaration returns Declaration
	 *
	 * Constraint:
	 *     (type=Type nomDecl=ID e=E)
	 */
	protected void sequence_Declaration(ISerializationContext context, Declaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RatPackage.Literals.DECLARATION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RatPackage.Literals.DECLARATION__TYPE));
			if (transientValues.isValueTransient(semanticObject, RatPackage.Literals.DECLARATION__NOM_DECL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RatPackage.Literals.DECLARATION__NOM_DECL));
			if (transientValues.isValueTransient(semanticObject, RatPackage.Literals.DECLARATION__E) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RatPackage.Literals.DECLARATION__E));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeclarationAccess().getTypeTypeParserRuleCall_0_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getDeclarationAccess().getNomDeclIDTerminalRuleCall_1_0(), semanticObject.getNomDecl());
		feeder.accept(grammarAccess.getDeclarationAccess().getEEParserRuleCall_3_0(), semanticObject.getE());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     E returns Denominateur
	 *     Denominateur returns Denominateur
	 *
	 * Constraint:
	 *     valDenum=E
	 */
	protected void sequence_Denominateur(ISerializationContext context, Denominateur semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RatPackage.Literals.DENOMINATEUR__VAL_DENUM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RatPackage.Literals.DENOMINATEUR__VAL_DENUM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDenominateurAccess().getValDenumEParserRuleCall_1_0(), semanticObject.getValDenum());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     E returns Entier
	 *     Entier returns Entier
	 *
	 * Constraint:
	 *     int=INT
	 */
	protected void sequence_Entier(ISerializationContext context, Entier semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RatPackage.Literals.ENTIER__INT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RatPackage.Literals.ENTIER__INT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEntierAccess().getIntINTTerminalRuleCall_0(), semanticObject.getInt());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Fun returns Fun
	 *
	 * Constraint:
	 *     (type=Type nomFun=ID param+=DP* is+=I* retour=E)
	 */
	protected void sequence_Fun(ISerializationContext context, Fun semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     E returns Identificateur
	 *     Identificateur returns Identificateur
	 *
	 * Constraint:
	 *     id=ID
	 */
	protected void sequence_Identificateur(ISerializationContext context, Identificateur semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RatPackage.Literals.IDENTIFICATEUR__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RatPackage.Literals.IDENTIFICATEUR__ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIdentificateurAccess().getIdIDTerminalRuleCall_0(), semanticObject.getId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     E returns Numerateur
	 *     Numerateur returns Numerateur
	 *
	 * Constraint:
	 *     valNum=E
	 */
	protected void sequence_Numerateur(ISerializationContext context, Numerateur semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RatPackage.Literals.NUMERATEUR__VAL_NUM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RatPackage.Literals.NUMERATEUR__VAL_NUM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumerateurAccess().getValNumEParserRuleCall_1_0(), semanticObject.getValNum());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     E returns OpBin
	 *     OpBin returns OpBin
	 *
	 * Constraint:
	 *     (e1=E op=Operande e2=E)
	 */
	protected void sequence_OpBin(ISerializationContext context, OpBin semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RatPackage.Literals.OP_BIN__E1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RatPackage.Literals.OP_BIN__E1));
			if (transientValues.isValueTransient(semanticObject, RatPackage.Literals.OP_BIN__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RatPackage.Literals.OP_BIN__OP));
			if (transientValues.isValueTransient(semanticObject, RatPackage.Literals.OP_BIN__E2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RatPackage.Literals.OP_BIN__E2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOpBinAccess().getE1EParserRuleCall_1_0(), semanticObject.getE1());
		feeder.accept(grammarAccess.getOpBinAccess().getOpOperandeParserRuleCall_2_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getOpBinAccess().getE2EParserRuleCall_3_0(), semanticObject.getE2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Operande returns Operande
	 *
	 * Constraint:
	 *     (op='+' | op='=' | op='*' | op='<')
	 */
	protected void sequence_Operande(ISerializationContext context, Operande semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     I returns Print
	 *     Print returns Print
	 *
	 * Constraint:
	 *     val=E
	 */
	protected void sequence_Print(ISerializationContext context, Print semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RatPackage.Literals.PRINT__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RatPackage.Literals.PRINT__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrintAccess().getValEParserRuleCall_1_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Prog returns Prog
	 *
	 * Constraint:
	 *     (fun+=Fun* nomProg=ID bloc=Bloc)
	 */
	protected void sequence_Prog(ISerializationContext context, Prog semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     E returns Rationnel
	 *     Rationnel returns Rationnel
	 *
	 * Constraint:
	 *     (e1=E e2=E)
	 */
	protected void sequence_Rationnel(ISerializationContext context, Rationnel semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RatPackage.Literals.RATIONNEL__E1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RatPackage.Literals.RATIONNEL__E1));
			if (transientValues.isValueTransient(semanticObject, RatPackage.Literals.RATIONNEL__E2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RatPackage.Literals.RATIONNEL__E2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRationnelAccess().getE1EParserRuleCall_1_0(), semanticObject.getE1());
		feeder.accept(grammarAccess.getRationnelAccess().getE2EParserRuleCall_3_0(), semanticObject.getE2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     I returns Tantque
	 *     Tantque returns Tantque
	 *
	 * Constraint:
	 *     (condt=E boucle=Bloc)
	 */
	protected void sequence_Tantque(ISerializationContext context, Tantque semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RatPackage.Literals.TANTQUE__CONDT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RatPackage.Literals.TANTQUE__CONDT));
			if (transientValues.isValueTransient(semanticObject, RatPackage.Literals.TANTQUE__BOUCLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RatPackage.Literals.TANTQUE__BOUCLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTantqueAccess().getCondtEParserRuleCall_1_0(), semanticObject.getCondt());
		feeder.accept(grammarAccess.getTantqueAccess().getBoucleBlocParserRuleCall_2_0(), semanticObject.getBoucle());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Type
	 *
	 * Constraint:
	 *     (t='bool' | t='int' | t='rat')
	 */
	protected void sequence_Type(ISerializationContext context, Type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}

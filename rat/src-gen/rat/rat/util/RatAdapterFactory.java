/**
 * generated by Xtext 2.12.0
 */
package rat.rat.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import rat.rat.Affectation;
import rat.rat.Appel;
import rat.rat.Bloc;
import rat.rat.CP;
import rat.rat.Conditionnelle;
import rat.rat.Constante;
import rat.rat.DP;
import rat.rat.Declaration;
import rat.rat.Denominateur;
import rat.rat.E;
import rat.rat.Entier;
import rat.rat.Fun;
import rat.rat.I;
import rat.rat.Identificateur;
import rat.rat.Numerateur;
import rat.rat.OpBin;
import rat.rat.Operande;
import rat.rat.Print;
import rat.rat.Prog;
import rat.rat.RatPackage;
import rat.rat.Rationnel;
import rat.rat.Tantque;
import rat.rat.Type;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see rat.rat.RatPackage
 * @generated
 */
public class RatAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static RatPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RatAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = RatPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RatSwitch<Adapter> modelSwitch =
    new RatSwitch<Adapter>()
    {
      @Override
      public Adapter caseProg(Prog object)
      {
        return createProgAdapter();
      }
      @Override
      public Adapter caseFun(Fun object)
      {
        return createFunAdapter();
      }
      @Override
      public Adapter caseBloc(Bloc object)
      {
        return createBlocAdapter();
      }
      @Override
      public Adapter caseI(I object)
      {
        return createIAdapter();
      }
      @Override
      public Adapter caseDeclaration(Declaration object)
      {
        return createDeclarationAdapter();
      }
      @Override
      public Adapter caseAffectation(Affectation object)
      {
        return createAffectationAdapter();
      }
      @Override
      public Adapter caseConstante(Constante object)
      {
        return createConstanteAdapter();
      }
      @Override
      public Adapter casePrint(Print object)
      {
        return createPrintAdapter();
      }
      @Override
      public Adapter caseConditionnelle(Conditionnelle object)
      {
        return createConditionnelleAdapter();
      }
      @Override
      public Adapter caseTantque(Tantque object)
      {
        return createTantqueAdapter();
      }
      @Override
      public Adapter caseDP(DP object)
      {
        return createDPAdapter();
      }
      @Override
      public Adapter caseType(Type object)
      {
        return createTypeAdapter();
      }
      @Override
      public Adapter caseCP(CP object)
      {
        return createCPAdapter();
      }
      @Override
      public Adapter caseE(E object)
      {
        return createEAdapter();
      }
      @Override
      public Adapter caseAppel(Appel object)
      {
        return createAppelAdapter();
      }
      @Override
      public Adapter caseRationnel(Rationnel object)
      {
        return createRationnelAdapter();
      }
      @Override
      public Adapter caseNumerateur(Numerateur object)
      {
        return createNumerateurAdapter();
      }
      @Override
      public Adapter caseDenominateur(Denominateur object)
      {
        return createDenominateurAdapter();
      }
      @Override
      public Adapter caseIdentificateur(Identificateur object)
      {
        return createIdentificateurAdapter();
      }
      @Override
      public Adapter caseBoolean(rat.rat.Boolean object)
      {
        return createBooleanAdapter();
      }
      @Override
      public Adapter caseEntier(Entier object)
      {
        return createEntierAdapter();
      }
      @Override
      public Adapter caseOpBin(OpBin object)
      {
        return createOpBinAdapter();
      }
      @Override
      public Adapter caseOperande(Operande object)
      {
        return createOperandeAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link rat.rat.Prog <em>Prog</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see rat.rat.Prog
   * @generated
   */
  public Adapter createProgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link rat.rat.Fun <em>Fun</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see rat.rat.Fun
   * @generated
   */
  public Adapter createFunAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link rat.rat.Bloc <em>Bloc</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see rat.rat.Bloc
   * @generated
   */
  public Adapter createBlocAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link rat.rat.I <em>I</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see rat.rat.I
   * @generated
   */
  public Adapter createIAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link rat.rat.Declaration <em>Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see rat.rat.Declaration
   * @generated
   */
  public Adapter createDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link rat.rat.Affectation <em>Affectation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see rat.rat.Affectation
   * @generated
   */
  public Adapter createAffectationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link rat.rat.Constante <em>Constante</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see rat.rat.Constante
   * @generated
   */
  public Adapter createConstanteAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link rat.rat.Print <em>Print</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see rat.rat.Print
   * @generated
   */
  public Adapter createPrintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link rat.rat.Conditionnelle <em>Conditionnelle</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see rat.rat.Conditionnelle
   * @generated
   */
  public Adapter createConditionnelleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link rat.rat.Tantque <em>Tantque</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see rat.rat.Tantque
   * @generated
   */
  public Adapter createTantqueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link rat.rat.DP <em>DP</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see rat.rat.DP
   * @generated
   */
  public Adapter createDPAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link rat.rat.Type <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see rat.rat.Type
   * @generated
   */
  public Adapter createTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link rat.rat.CP <em>CP</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see rat.rat.CP
   * @generated
   */
  public Adapter createCPAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link rat.rat.E <em>E</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see rat.rat.E
   * @generated
   */
  public Adapter createEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link rat.rat.Appel <em>Appel</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see rat.rat.Appel
   * @generated
   */
  public Adapter createAppelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link rat.rat.Rationnel <em>Rationnel</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see rat.rat.Rationnel
   * @generated
   */
  public Adapter createRationnelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link rat.rat.Numerateur <em>Numerateur</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see rat.rat.Numerateur
   * @generated
   */
  public Adapter createNumerateurAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link rat.rat.Denominateur <em>Denominateur</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see rat.rat.Denominateur
   * @generated
   */
  public Adapter createDenominateurAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link rat.rat.Identificateur <em>Identificateur</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see rat.rat.Identificateur
   * @generated
   */
  public Adapter createIdentificateurAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link rat.rat.Boolean <em>Boolean</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see rat.rat.Boolean
   * @generated
   */
  public Adapter createBooleanAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link rat.rat.Entier <em>Entier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see rat.rat.Entier
   * @generated
   */
  public Adapter createEntierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link rat.rat.OpBin <em>Op Bin</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see rat.rat.OpBin
   * @generated
   */
  public Adapter createOpBinAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link rat.rat.Operande <em>Operande</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see rat.rat.Operande
   * @generated
   */
  public Adapter createOperandeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //RatAdapterFactory

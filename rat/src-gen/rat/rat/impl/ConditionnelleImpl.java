/**
 * generated by Xtext 2.12.0
 */
package rat.rat.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import rat.rat.Bloc;
import rat.rat.Conditionnelle;
import rat.rat.E;
import rat.rat.RatPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Conditionnelle</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link rat.rat.impl.ConditionnelleImpl#getCondc <em>Condc</em>}</li>
 *   <li>{@link rat.rat.impl.ConditionnelleImpl#getBloc1cond <em>Bloc1cond</em>}</li>
 *   <li>{@link rat.rat.impl.ConditionnelleImpl#getBloc2cond <em>Bloc2cond</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConditionnelleImpl extends IImpl implements Conditionnelle
{
  /**
   * The cached value of the '{@link #getCondc() <em>Condc</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondc()
   * @generated
   * @ordered
   */
  protected E condc;

  /**
   * The cached value of the '{@link #getBloc1cond() <em>Bloc1cond</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBloc1cond()
   * @generated
   * @ordered
   */
  protected Bloc bloc1cond;

  /**
   * The cached value of the '{@link #getBloc2cond() <em>Bloc2cond</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBloc2cond()
   * @generated
   * @ordered
   */
  protected Bloc bloc2cond;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConditionnelleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RatPackage.Literals.CONDITIONNELLE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public E getCondc()
  {
    return condc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCondc(E newCondc, NotificationChain msgs)
  {
    E oldCondc = condc;
    condc = newCondc;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RatPackage.CONDITIONNELLE__CONDC, oldCondc, newCondc);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCondc(E newCondc)
  {
    if (newCondc != condc)
    {
      NotificationChain msgs = null;
      if (condc != null)
        msgs = ((InternalEObject)condc).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RatPackage.CONDITIONNELLE__CONDC, null, msgs);
      if (newCondc != null)
        msgs = ((InternalEObject)newCondc).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RatPackage.CONDITIONNELLE__CONDC, null, msgs);
      msgs = basicSetCondc(newCondc, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RatPackage.CONDITIONNELLE__CONDC, newCondc, newCondc));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Bloc getBloc1cond()
  {
    return bloc1cond;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBloc1cond(Bloc newBloc1cond, NotificationChain msgs)
  {
    Bloc oldBloc1cond = bloc1cond;
    bloc1cond = newBloc1cond;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RatPackage.CONDITIONNELLE__BLOC1COND, oldBloc1cond, newBloc1cond);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBloc1cond(Bloc newBloc1cond)
  {
    if (newBloc1cond != bloc1cond)
    {
      NotificationChain msgs = null;
      if (bloc1cond != null)
        msgs = ((InternalEObject)bloc1cond).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RatPackage.CONDITIONNELLE__BLOC1COND, null, msgs);
      if (newBloc1cond != null)
        msgs = ((InternalEObject)newBloc1cond).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RatPackage.CONDITIONNELLE__BLOC1COND, null, msgs);
      msgs = basicSetBloc1cond(newBloc1cond, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RatPackage.CONDITIONNELLE__BLOC1COND, newBloc1cond, newBloc1cond));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Bloc getBloc2cond()
  {
    return bloc2cond;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBloc2cond(Bloc newBloc2cond, NotificationChain msgs)
  {
    Bloc oldBloc2cond = bloc2cond;
    bloc2cond = newBloc2cond;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RatPackage.CONDITIONNELLE__BLOC2COND, oldBloc2cond, newBloc2cond);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBloc2cond(Bloc newBloc2cond)
  {
    if (newBloc2cond != bloc2cond)
    {
      NotificationChain msgs = null;
      if (bloc2cond != null)
        msgs = ((InternalEObject)bloc2cond).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RatPackage.CONDITIONNELLE__BLOC2COND, null, msgs);
      if (newBloc2cond != null)
        msgs = ((InternalEObject)newBloc2cond).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RatPackage.CONDITIONNELLE__BLOC2COND, null, msgs);
      msgs = basicSetBloc2cond(newBloc2cond, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RatPackage.CONDITIONNELLE__BLOC2COND, newBloc2cond, newBloc2cond));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RatPackage.CONDITIONNELLE__CONDC:
        return basicSetCondc(null, msgs);
      case RatPackage.CONDITIONNELLE__BLOC1COND:
        return basicSetBloc1cond(null, msgs);
      case RatPackage.CONDITIONNELLE__BLOC2COND:
        return basicSetBloc2cond(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RatPackage.CONDITIONNELLE__CONDC:
        return getCondc();
      case RatPackage.CONDITIONNELLE__BLOC1COND:
        return getBloc1cond();
      case RatPackage.CONDITIONNELLE__BLOC2COND:
        return getBloc2cond();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RatPackage.CONDITIONNELLE__CONDC:
        setCondc((E)newValue);
        return;
      case RatPackage.CONDITIONNELLE__BLOC1COND:
        setBloc1cond((Bloc)newValue);
        return;
      case RatPackage.CONDITIONNELLE__BLOC2COND:
        setBloc2cond((Bloc)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RatPackage.CONDITIONNELLE__CONDC:
        setCondc((E)null);
        return;
      case RatPackage.CONDITIONNELLE__BLOC1COND:
        setBloc1cond((Bloc)null);
        return;
      case RatPackage.CONDITIONNELLE__BLOC2COND:
        setBloc2cond((Bloc)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RatPackage.CONDITIONNELLE__CONDC:
        return condc != null;
      case RatPackage.CONDITIONNELLE__BLOC1COND:
        return bloc1cond != null;
      case RatPackage.CONDITIONNELLE__BLOC2COND:
        return bloc2cond != null;
    }
    return super.eIsSet(featureID);
  }

} //ConditionnelleImpl

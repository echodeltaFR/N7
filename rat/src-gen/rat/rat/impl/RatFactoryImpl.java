/**
 * generated by Xtext 2.16.0
 */
package rat.rat.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import rat.rat.Affectation;
import rat.rat.Appel;
import rat.rat.Bloc;
import rat.rat.Conditionnelle;
import rat.rat.Constante;
import rat.rat.DP;
import rat.rat.Declaration;
import rat.rat.Denominateur;
import rat.rat.E;
import rat.rat.Entier;
import rat.rat.Fun;
import rat.rat.I;
import rat.rat.Identificateur;
import rat.rat.Numerateur;
import rat.rat.OpBin;
import rat.rat.Operande;
import rat.rat.Print;
import rat.rat.Prog;
import rat.rat.RatFactory;
import rat.rat.RatPackage;
import rat.rat.Rationnel;
import rat.rat.Tantque;
import rat.rat.Type;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class RatFactoryImpl extends EFactoryImpl implements RatFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static RatFactory init()
  {
    try
    {
      RatFactory theRatFactory = (RatFactory)EPackage.Registry.INSTANCE.getEFactory(RatPackage.eNS_URI);
      if (theRatFactory != null)
      {
        return theRatFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new RatFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RatFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case RatPackage.PROG: return createProg();
      case RatPackage.FUN: return createFun();
      case RatPackage.BLOC: return createBloc();
      case RatPackage.I: return createI();
      case RatPackage.DECLARATION: return createDeclaration();
      case RatPackage.AFFECTATION: return createAffectation();
      case RatPackage.CONSTANTE: return createConstante();
      case RatPackage.PRINT: return createPrint();
      case RatPackage.CONDITIONNELLE: return createConditionnelle();
      case RatPackage.TANTQUE: return createTantque();
      case RatPackage.DP: return createDP();
      case RatPackage.TYPE: return createType();
      case RatPackage.E: return createE();
      case RatPackage.APPEL: return createAppel();
      case RatPackage.RATIONNEL: return createRationnel();
      case RatPackage.NUMERATEUR: return createNumerateur();
      case RatPackage.DENOMINATEUR: return createDenominateur();
      case RatPackage.IDENTIFICATEUR: return createIdentificateur();
      case RatPackage.BOOLEAN: return createBoolean();
      case RatPackage.ENTIER: return createEntier();
      case RatPackage.OP_BIN: return createOpBin();
      case RatPackage.OPERANDE: return createOperande();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Prog createProg()
  {
    ProgImpl prog = new ProgImpl();
    return prog;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Fun createFun()
  {
    FunImpl fun = new FunImpl();
    return fun;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Bloc createBloc()
  {
    BlocImpl bloc = new BlocImpl();
    return bloc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public I createI()
  {
    IImpl i = new IImpl();
    return i;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Declaration createDeclaration()
  {
    DeclarationImpl declaration = new DeclarationImpl();
    return declaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Affectation createAffectation()
  {
    AffectationImpl affectation = new AffectationImpl();
    return affectation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Constante createConstante()
  {
    ConstanteImpl constante = new ConstanteImpl();
    return constante;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Print createPrint()
  {
    PrintImpl print = new PrintImpl();
    return print;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Conditionnelle createConditionnelle()
  {
    ConditionnelleImpl conditionnelle = new ConditionnelleImpl();
    return conditionnelle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Tantque createTantque()
  {
    TantqueImpl tantque = new TantqueImpl();
    return tantque;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DP createDP()
  {
    DPImpl dp = new DPImpl();
    return dp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public E createE()
  {
    EImpl e = new EImpl();
    return e;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Appel createAppel()
  {
    AppelImpl appel = new AppelImpl();
    return appel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Rationnel createRationnel()
  {
    RationnelImpl rationnel = new RationnelImpl();
    return rationnel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Numerateur createNumerateur()
  {
    NumerateurImpl numerateur = new NumerateurImpl();
    return numerateur;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Denominateur createDenominateur()
  {
    DenominateurImpl denominateur = new DenominateurImpl();
    return denominateur;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Identificateur createIdentificateur()
  {
    IdentificateurImpl identificateur = new IdentificateurImpl();
    return identificateur;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public rat.rat.Boolean createBoolean()
  {
    BooleanImpl boolean_ = new BooleanImpl();
    return boolean_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Entier createEntier()
  {
    EntierImpl entier = new EntierImpl();
    return entier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OpBin createOpBin()
  {
    OpBinImpl opBin = new OpBinImpl();
    return opBin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Operande createOperande()
  {
    OperandeImpl operande = new OperandeImpl();
    return operande;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RatPackage getRatPackage()
  {
    return (RatPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static RatPackage getPackage()
  {
    return RatPackage.eINSTANCE;
  }

} //RatFactoryImpl

/**
 * generated by Xtext 2.12.0
 */
package rat.rat;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Fun</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * </p>
 * <ul>
 *   <li>{@link rat.rat.Fun#getType <em>Type</em>}</li>
 *   <li>{@link rat.rat.Fun#getNom <em>Nom</em>}</li>
 *   <li>{@link rat.rat.Fun#getParam <em>Param</em>}</li>
 *   <li>{@link rat.rat.Fun#getIs <em>Is</em>}</li>
 *   <li>{@link rat.rat.Fun#getE <em>E</em>}</li>
 * </ul>
 *
 * @see rat.rat.RatPackage#getFun()
 * @model
 * @generated
 */
public interface Fun extends EObject
{
  /**
   * Returns the value of the '<em><b>Type</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Type</em>' containment reference isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Type</em>' containment reference.
   * @see #setType(Type)
   * @see rat.rat.RatPackage#getFun_Type()
   * @model containment="true"
   * @generated
   */
  Type getType();

  /**
   * Sets the value of the '{@link rat.rat.Fun#getType <em>Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Type</em>' containment reference.
   * @see #getType()
   * @generated
   */
  void setType(Type value);

  /**
   * Returns the value of the '<em><b>Nom</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Nom</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Nom</em>' attribute.
   * @see #setNom(String)
   * @see rat.rat.RatPackage#getFun_Nom()
   * @model
   * @generated
   */
  String getNom();

  /**
   * Sets the value of the '{@link rat.rat.Fun#getNom <em>Nom</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Nom</em>' attribute.
   * @see #getNom()
   * @generated
   */
  void setNom(String value);

  /**
   * Returns the value of the '<em><b>Param</b></em>' containment reference list.
   * The list contents are of type {@link rat.rat.DP}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Param</em>' containment reference list isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Param</em>' containment reference list.
   * @see rat.rat.RatPackage#getFun_Param()
   * @model containment="true"
   * @generated
   */
  EList<DP> getParam();

  /**
   * Returns the value of the '<em><b>Is</b></em>' containment reference list.
   * The list contents are of type {@link rat.rat.I}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Is</em>' containment reference list isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Is</em>' containment reference list.
   * @see rat.rat.RatPackage#getFun_Is()
   * @model containment="true"
   * @generated
   */
  EList<I> getIs();

  /**
   * Returns the value of the '<em><b>E</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>E</em>' containment reference isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>E</em>' containment reference.
   * @see #setE(E)
   * @see rat.rat.RatPackage#getFun_E()
   * @model containment="true"
   * @generated
   */
  E getE();

  /**
   * Sets the value of the '{@link rat.rat.Fun#getE <em>E</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>E</em>' containment reference.
   * @see #getE()
   * @generated
   */
  void setE(E value);

} // Fun

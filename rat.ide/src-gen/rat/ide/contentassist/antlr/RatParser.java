/*
 * generated by Xtext 2.12.0
 */
package rat.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import rat.ide.contentassist.antlr.internal.InternalRatParser;
import rat.services.RatGrammarAccess;

public class RatParser extends AbstractContentAssistParser {

	@Inject
	private RatGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalRatParser createParser() {
		InternalRatParser result = new InternalRatParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getIAccess().getAlternatives(), "rule__I__Alternatives");
					put(grammarAccess.getTypeAccess().getTAlternatives_0(), "rule__Type__TAlternatives_0");
					put(grammarAccess.getEAccess().getAlternatives(), "rule__E__Alternatives");
					put(grammarAccess.getBooleanAccess().getBAlternatives_0(), "rule__Boolean__BAlternatives_0");
					put(grammarAccess.getOperandeAccess().getOpAlternatives_0(), "rule__Operande__OpAlternatives_0");
					put(grammarAccess.getProgAccess().getGroup(), "rule__Prog__Group__0");
					put(grammarAccess.getFunAccess().getGroup(), "rule__Fun__Group__0");
					put(grammarAccess.getBlocAccess().getGroup(), "rule__Bloc__Group__0");
					put(grammarAccess.getDeclarationAccess().getGroup(), "rule__Declaration__Group__0");
					put(grammarAccess.getAffectationAccess().getGroup(), "rule__Affectation__Group__0");
					put(grammarAccess.getConstanteAccess().getGroup(), "rule__Constante__Group__0");
					put(grammarAccess.getPrintAccess().getGroup(), "rule__Print__Group__0");
					put(grammarAccess.getConditionnelleAccess().getGroup(), "rule__Conditionnelle__Group__0");
					put(grammarAccess.getTantqueAccess().getGroup(), "rule__Tantque__Group__0");
					put(grammarAccess.getDPAccess().getGroup(), "rule__DP__Group__0");
					put(grammarAccess.getCPAccess().getGroup(), "rule__CP__Group__0");
					put(grammarAccess.getAppelAccess().getGroup(), "rule__Appel__Group__0");
					put(grammarAccess.getRationnelAccess().getGroup(), "rule__Rationnel__Group__0");
					put(grammarAccess.getNumerateurAccess().getGroup(), "rule__Numerateur__Group__0");
					put(grammarAccess.getDenominateurAccess().getGroup(), "rule__Denominateur__Group__0");
					put(grammarAccess.getOpBinAccess().getGroup(), "rule__OpBin__Group__0");
					put(grammarAccess.getProgAccess().getFunAssignment_0(), "rule__Prog__FunAssignment_0");
					put(grammarAccess.getProgAccess().getBlocAssignment_2(), "rule__Prog__BlocAssignment_2");
					put(grammarAccess.getFunAccess().getTypeAssignment_0(), "rule__Fun__TypeAssignment_0");
					put(grammarAccess.getFunAccess().getNomAssignment_1(), "rule__Fun__NomAssignment_1");
					put(grammarAccess.getFunAccess().getParamAssignment_3(), "rule__Fun__ParamAssignment_3");
					put(grammarAccess.getFunAccess().getIsAssignment_6(), "rule__Fun__IsAssignment_6");
					put(grammarAccess.getFunAccess().getEAssignment_8(), "rule__Fun__EAssignment_8");
					put(grammarAccess.getBlocAccess().getIsAssignment_2(), "rule__Bloc__IsAssignment_2");
					put(grammarAccess.getDeclarationAccess().getTypeAssignment_0(), "rule__Declaration__TypeAssignment_0");
					put(grammarAccess.getDeclarationAccess().getNomAssignment_1(), "rule__Declaration__NomAssignment_1");
					put(grammarAccess.getDeclarationAccess().getEAssignment_3(), "rule__Declaration__EAssignment_3");
					put(grammarAccess.getAffectationAccess().getNomAssignment_0(), "rule__Affectation__NomAssignment_0");
					put(grammarAccess.getAffectationAccess().getEAssignment_2(), "rule__Affectation__EAssignment_2");
					put(grammarAccess.getConstanteAccess().getNomAssignment_1(), "rule__Constante__NomAssignment_1");
					put(grammarAccess.getConstanteAccess().getEAssignment_3(), "rule__Constante__EAssignment_3");
					put(grammarAccess.getPrintAccess().getEAssignment_1(), "rule__Print__EAssignment_1");
					put(grammarAccess.getConditionnelleAccess().getEAssignment_1(), "rule__Conditionnelle__EAssignment_1");
					put(grammarAccess.getConditionnelleAccess().getBloc1Assignment_2(), "rule__Conditionnelle__Bloc1Assignment_2");
					put(grammarAccess.getConditionnelleAccess().getBloc2Assignment_4(), "rule__Conditionnelle__Bloc2Assignment_4");
					put(grammarAccess.getTantqueAccess().getEAssignment_1(), "rule__Tantque__EAssignment_1");
					put(grammarAccess.getTantqueAccess().getBlocAssignment_2(), "rule__Tantque__BlocAssignment_2");
					put(grammarAccess.getDPAccess().getTypeAssignment_0(), "rule__DP__TypeAssignment_0");
					put(grammarAccess.getDPAccess().getIdAssignment_1(), "rule__DP__IdAssignment_1");
					put(grammarAccess.getTypeAccess().getTAssignment(), "rule__Type__TAssignment");
					put(grammarAccess.getCPAccess().getEAssignment_1(), "rule__CP__EAssignment_1");
					put(grammarAccess.getAppelAccess().getNomAssignment_1(), "rule__Appel__NomAssignment_1");
					put(grammarAccess.getAppelAccess().getParamAssignment_3(), "rule__Appel__ParamAssignment_3");
					put(grammarAccess.getRationnelAccess().getE1Assignment_1(), "rule__Rationnel__E1Assignment_1");
					put(grammarAccess.getRationnelAccess().getE2Assignment_3(), "rule__Rationnel__E2Assignment_3");
					put(grammarAccess.getNumerateurAccess().getEAssignment_1(), "rule__Numerateur__EAssignment_1");
					put(grammarAccess.getDenominateurAccess().getEAssignment_1(), "rule__Denominateur__EAssignment_1");
					put(grammarAccess.getIdentificateurAccess().getIdAssignment(), "rule__Identificateur__IdAssignment");
					put(grammarAccess.getBooleanAccess().getBAssignment(), "rule__Boolean__BAssignment");
					put(grammarAccess.getEntierAccess().getIntAssignment(), "rule__Entier__IntAssignment");
					put(grammarAccess.getOpBinAccess().getE1Assignment_1(), "rule__OpBin__E1Assignment_1");
					put(grammarAccess.getOpBinAccess().getOpAssignment_2(), "rule__OpBin__OpAssignment_2");
					put(grammarAccess.getOpBinAccess().getE2Assignment_3(), "rule__OpBin__E2Assignment_3");
					put(grammarAccess.getOperandeAccess().getOpAssignment(), "rule__Operande__OpAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RatGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RatGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}

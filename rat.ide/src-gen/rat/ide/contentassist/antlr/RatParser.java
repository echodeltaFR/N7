/*
 * generated by Xtext 2.16.0
 */
package rat.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import rat.ide.contentassist.antlr.internal.InternalRatParser;
import rat.services.RatGrammarAccess;

public class RatParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(RatGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, RatGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getIAccess().getAlternatives(), "rule__I__Alternatives");
			builder.put(grammarAccess.getTypeAccess().getTAlternatives_0(), "rule__Type__TAlternatives_0");
			builder.put(grammarAccess.getEAccess().getAlternatives(), "rule__E__Alternatives");
			builder.put(grammarAccess.getBooleanAccess().getValAlternatives_0(), "rule__Boolean__ValAlternatives_0");
			builder.put(grammarAccess.getOperandeAccess().getOpAlternatives_0(), "rule__Operande__OpAlternatives_0");
			builder.put(grammarAccess.getProgAccess().getGroup(), "rule__Prog__Group__0");
			builder.put(grammarAccess.getFunAccess().getGroup(), "rule__Fun__Group__0");
			builder.put(grammarAccess.getBlocAccess().getGroup(), "rule__Bloc__Group__0");
			builder.put(grammarAccess.getDeclarationAccess().getGroup(), "rule__Declaration__Group__0");
			builder.put(grammarAccess.getAffectationAccess().getGroup(), "rule__Affectation__Group__0");
			builder.put(grammarAccess.getConstanteAccess().getGroup(), "rule__Constante__Group__0");
			builder.put(grammarAccess.getPrintAccess().getGroup(), "rule__Print__Group__0");
			builder.put(grammarAccess.getConditionnelleAccess().getGroup(), "rule__Conditionnelle__Group__0");
			builder.put(grammarAccess.getTantqueAccess().getGroup(), "rule__Tantque__Group__0");
			builder.put(grammarAccess.getDPAccess().getGroup(), "rule__DP__Group__0");
			builder.put(grammarAccess.getAppelAccess().getGroup(), "rule__Appel__Group__0");
			builder.put(grammarAccess.getRationnelAccess().getGroup(), "rule__Rationnel__Group__0");
			builder.put(grammarAccess.getNumerateurAccess().getGroup(), "rule__Numerateur__Group__0");
			builder.put(grammarAccess.getDenominateurAccess().getGroup(), "rule__Denominateur__Group__0");
			builder.put(grammarAccess.getOpBinAccess().getGroup(), "rule__OpBin__Group__0");
			builder.put(grammarAccess.getProgAccess().getFunAssignment_0(), "rule__Prog__FunAssignment_0");
			builder.put(grammarAccess.getProgAccess().getNomProgAssignment_1(), "rule__Prog__NomProgAssignment_1");
			builder.put(grammarAccess.getProgAccess().getBlocAssignment_2(), "rule__Prog__BlocAssignment_2");
			builder.put(grammarAccess.getFunAccess().getTypeAssignment_0(), "rule__Fun__TypeAssignment_0");
			builder.put(grammarAccess.getFunAccess().getNomFunAssignment_1(), "rule__Fun__NomFunAssignment_1");
			builder.put(grammarAccess.getFunAccess().getParamAssignment_3(), "rule__Fun__ParamAssignment_3");
			builder.put(grammarAccess.getFunAccess().getIsAssignment_6(), "rule__Fun__IsAssignment_6");
			builder.put(grammarAccess.getFunAccess().getRetourAssignment_8(), "rule__Fun__RetourAssignment_8");
			builder.put(grammarAccess.getBlocAccess().getIsAssignment_2(), "rule__Bloc__IsAssignment_2");
			builder.put(grammarAccess.getDeclarationAccess().getTypeAssignment_0(), "rule__Declaration__TypeAssignment_0");
			builder.put(grammarAccess.getDeclarationAccess().getNomDeclAssignment_1(), "rule__Declaration__NomDeclAssignment_1");
			builder.put(grammarAccess.getDeclarationAccess().getEAssignment_3(), "rule__Declaration__EAssignment_3");
			builder.put(grammarAccess.getAffectationAccess().getNomAffAssignment_0(), "rule__Affectation__NomAffAssignment_0");
			builder.put(grammarAccess.getAffectationAccess().getEAssignment_2(), "rule__Affectation__EAssignment_2");
			builder.put(grammarAccess.getConstanteAccess().getNomConstAssignment_1(), "rule__Constante__NomConstAssignment_1");
			builder.put(grammarAccess.getConstanteAccess().getValAssignment_3(), "rule__Constante__ValAssignment_3");
			builder.put(grammarAccess.getPrintAccess().getValAssignment_1(), "rule__Print__ValAssignment_1");
			builder.put(grammarAccess.getConditionnelleAccess().getCondcAssignment_1(), "rule__Conditionnelle__CondcAssignment_1");
			builder.put(grammarAccess.getConditionnelleAccess().getBloc1condAssignment_2(), "rule__Conditionnelle__Bloc1condAssignment_2");
			builder.put(grammarAccess.getConditionnelleAccess().getBloc2condAssignment_4(), "rule__Conditionnelle__Bloc2condAssignment_4");
			builder.put(grammarAccess.getTantqueAccess().getCondtAssignment_1(), "rule__Tantque__CondtAssignment_1");
			builder.put(grammarAccess.getTantqueAccess().getBoucleAssignment_2(), "rule__Tantque__BoucleAssignment_2");
			builder.put(grammarAccess.getDPAccess().getTypeAssignment_0(), "rule__DP__TypeAssignment_0");
			builder.put(grammarAccess.getDPAccess().getIdAssignment_1(), "rule__DP__IdAssignment_1");
			builder.put(grammarAccess.getTypeAccess().getTAssignment(), "rule__Type__TAssignment");
			builder.put(grammarAccess.getAppelAccess().getNomAppelAssignment_1(), "rule__Appel__NomAppelAssignment_1");
			builder.put(grammarAccess.getAppelAccess().getParamAssignment_3(), "rule__Appel__ParamAssignment_3");
			builder.put(grammarAccess.getRationnelAccess().getE1Assignment_1(), "rule__Rationnel__E1Assignment_1");
			builder.put(grammarAccess.getRationnelAccess().getE2Assignment_3(), "rule__Rationnel__E2Assignment_3");
			builder.put(grammarAccess.getNumerateurAccess().getValNumAssignment_1(), "rule__Numerateur__ValNumAssignment_1");
			builder.put(grammarAccess.getDenominateurAccess().getValDenumAssignment_1(), "rule__Denominateur__ValDenumAssignment_1");
			builder.put(grammarAccess.getIdentificateurAccess().getIdAssignment(), "rule__Identificateur__IdAssignment");
			builder.put(grammarAccess.getBooleanAccess().getValAssignment(), "rule__Boolean__ValAssignment");
			builder.put(grammarAccess.getEntierAccess().getIntAssignment(), "rule__Entier__IntAssignment");
			builder.put(grammarAccess.getOpBinAccess().getE1Assignment_1(), "rule__OpBin__E1Assignment_1");
			builder.put(grammarAccess.getOpBinAccess().getOpAssignment_2(), "rule__OpBin__OpAssignment_2");
			builder.put(grammarAccess.getOpBinAccess().getE2Assignment_3(), "rule__OpBin__E2Assignment_3");
			builder.put(grammarAccess.getOperandeAccess().getOpAssignment(), "rule__Operande__OpAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private RatGrammarAccess grammarAccess;

	@Override
	protected InternalRatParser createParser() {
		InternalRatParser result = new InternalRatParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RatGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RatGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}

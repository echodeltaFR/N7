/*
 * generated by Xtext 2.12.0
 */
grammar InternalRat;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package rat.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package rat.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import rat.services.RatGrammarAccess;

}
@parser::members {
	private RatGrammarAccess grammarAccess;

	public void setGrammarAccess(RatGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProg
entryRuleProg
:
{ before(grammarAccess.getProgRule()); }
	 ruleProg
{ after(grammarAccess.getProgRule()); } 
	 EOF 
;

// Rule Prog
ruleProg 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgAccess().getGroup()); }
		(rule__Prog__Group__0)
		{ after(grammarAccess.getProgAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFun
entryRuleFun
:
{ before(grammarAccess.getFunRule()); }
	 ruleFun
{ after(grammarAccess.getFunRule()); } 
	 EOF 
;

// Rule Fun
ruleFun 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunAccess().getGroup()); }
		(rule__Fun__Group__0)
		{ after(grammarAccess.getFunAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBloc
entryRuleBloc
:
{ before(grammarAccess.getBlocRule()); }
	 ruleBloc
{ after(grammarAccess.getBlocRule()); } 
	 EOF 
;

// Rule Bloc
ruleBloc 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlocAccess().getGroup()); }
		(rule__Bloc__Group__0)
		{ after(grammarAccess.getBlocAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleI
entryRuleI
:
{ before(grammarAccess.getIRule()); }
	 ruleI
{ after(grammarAccess.getIRule()); } 
	 EOF 
;

// Rule I
ruleI 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIAccess().getAlternatives()); }
		(rule__I__Alternatives)
		{ after(grammarAccess.getIAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDeclaration
entryRuleDeclaration
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruleDeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule Declaration
ruleDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeclarationAccess().getGroup()); }
		(rule__Declaration__Group__0)
		{ after(grammarAccess.getDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAffectation
entryRuleAffectation
:
{ before(grammarAccess.getAffectationRule()); }
	 ruleAffectation
{ after(grammarAccess.getAffectationRule()); } 
	 EOF 
;

// Rule Affectation
ruleAffectation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAffectationAccess().getGroup()); }
		(rule__Affectation__Group__0)
		{ after(grammarAccess.getAffectationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstante
entryRuleConstante
:
{ before(grammarAccess.getConstanteRule()); }
	 ruleConstante
{ after(grammarAccess.getConstanteRule()); } 
	 EOF 
;

// Rule Constante
ruleConstante 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstanteAccess().getGroup()); }
		(rule__Constante__Group__0)
		{ after(grammarAccess.getConstanteAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrint
entryRulePrint
:
{ before(grammarAccess.getPrintRule()); }
	 rulePrint
{ after(grammarAccess.getPrintRule()); } 
	 EOF 
;

// Rule Print
rulePrint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrintAccess().getGroup()); }
		(rule__Print__Group__0)
		{ after(grammarAccess.getPrintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditionnelle
entryRuleConditionnelle
:
{ before(grammarAccess.getConditionnelleRule()); }
	 ruleConditionnelle
{ after(grammarAccess.getConditionnelleRule()); } 
	 EOF 
;

// Rule Conditionnelle
ruleConditionnelle 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionnelleAccess().getGroup()); }
		(rule__Conditionnelle__Group__0)
		{ after(grammarAccess.getConditionnelleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTantque
entryRuleTantque
:
{ before(grammarAccess.getTantqueRule()); }
	 ruleTantque
{ after(grammarAccess.getTantqueRule()); } 
	 EOF 
;

// Rule Tantque
ruleTantque 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTantqueAccess().getGroup()); }
		(rule__Tantque__Group__0)
		{ after(grammarAccess.getTantqueAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDP
entryRuleDP
:
{ before(grammarAccess.getDPRule()); }
	 ruleDP
{ after(grammarAccess.getDPRule()); } 
	 EOF 
;

// Rule DP
ruleDP 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDPAccess().getGroup()); }
		(rule__DP__Group__0)
		{ after(grammarAccess.getDPAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleType
entryRuleType
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeAccess().getTAssignment()); }
		(rule__Type__TAssignment)
		{ after(grammarAccess.getTypeAccess().getTAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCP
entryRuleCP
:
{ before(grammarAccess.getCPRule()); }
	 ruleCP
{ after(grammarAccess.getCPRule()); } 
	 EOF 
;

// Rule CP
ruleCP 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCPAccess().getGroup()); }
		(rule__CP__Group__0)
		{ after(grammarAccess.getCPAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleE
entryRuleE
:
{ before(grammarAccess.getERule()); }
	 ruleE
{ after(grammarAccess.getERule()); } 
	 EOF 
;

// Rule E
ruleE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEAccess().getAlternatives()); }
		(rule__E__Alternatives)
		{ after(grammarAccess.getEAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAppel
entryRuleAppel
:
{ before(grammarAccess.getAppelRule()); }
	 ruleAppel
{ after(grammarAccess.getAppelRule()); } 
	 EOF 
;

// Rule Appel
ruleAppel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAppelAccess().getGroup()); }
		(rule__Appel__Group__0)
		{ after(grammarAccess.getAppelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRationnel
entryRuleRationnel
:
{ before(grammarAccess.getRationnelRule()); }
	 ruleRationnel
{ after(grammarAccess.getRationnelRule()); } 
	 EOF 
;

// Rule Rationnel
ruleRationnel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRationnelAccess().getGroup()); }
		(rule__Rationnel__Group__0)
		{ after(grammarAccess.getRationnelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumerateur
entryRuleNumerateur
:
{ before(grammarAccess.getNumerateurRule()); }
	 ruleNumerateur
{ after(grammarAccess.getNumerateurRule()); } 
	 EOF 
;

// Rule Numerateur
ruleNumerateur 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumerateurAccess().getGroup()); }
		(rule__Numerateur__Group__0)
		{ after(grammarAccess.getNumerateurAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDenominateur
entryRuleDenominateur
:
{ before(grammarAccess.getDenominateurRule()); }
	 ruleDenominateur
{ after(grammarAccess.getDenominateurRule()); } 
	 EOF 
;

// Rule Denominateur
ruleDenominateur 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDenominateurAccess().getGroup()); }
		(rule__Denominateur__Group__0)
		{ after(grammarAccess.getDenominateurAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIdentificateur
entryRuleIdentificateur
:
{ before(grammarAccess.getIdentificateurRule()); }
	 ruleIdentificateur
{ after(grammarAccess.getIdentificateurRule()); } 
	 EOF 
;

// Rule Identificateur
ruleIdentificateur 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIdentificateurAccess().getIdAssignment()); }
		(rule__Identificateur__IdAssignment)
		{ after(grammarAccess.getIdentificateurAccess().getIdAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolean
entryRuleBoolean
:
{ before(grammarAccess.getBooleanRule()); }
	 ruleBoolean
{ after(grammarAccess.getBooleanRule()); } 
	 EOF 
;

// Rule Boolean
ruleBoolean 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanAccess().getBAssignment()); }
		(rule__Boolean__BAssignment)
		{ after(grammarAccess.getBooleanAccess().getBAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEntier
entryRuleEntier
:
{ before(grammarAccess.getEntierRule()); }
	 ruleEntier
{ after(grammarAccess.getEntierRule()); } 
	 EOF 
;

// Rule Entier
ruleEntier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEntierAccess().getIntAssignment()); }
		(rule__Entier__IntAssignment)
		{ after(grammarAccess.getEntierAccess().getIntAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOpBin
entryRuleOpBin
:
{ before(grammarAccess.getOpBinRule()); }
	 ruleOpBin
{ after(grammarAccess.getOpBinRule()); } 
	 EOF 
;

// Rule OpBin
ruleOpBin 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOpBinAccess().getGroup()); }
		(rule__OpBin__Group__0)
		{ after(grammarAccess.getOpBinAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperande
entryRuleOperande
:
{ before(grammarAccess.getOperandeRule()); }
	 ruleOperande
{ after(grammarAccess.getOperandeRule()); } 
	 EOF 
;

// Rule Operande
ruleOperande 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperandeAccess().getOpAssignment()); }
		(rule__Operande__OpAssignment)
		{ after(grammarAccess.getOperandeAccess().getOpAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__I__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIAccess().getDeclarationParserRuleCall_0()); }
		ruleDeclaration
		{ after(grammarAccess.getIAccess().getDeclarationParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getIAccess().getAffectationParserRuleCall_1()); }
		ruleAffectation
		{ after(grammarAccess.getIAccess().getAffectationParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getIAccess().getConstanteParserRuleCall_2()); }
		ruleConstante
		{ after(grammarAccess.getIAccess().getConstanteParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getIAccess().getPrintParserRuleCall_3()); }
		rulePrint
		{ after(grammarAccess.getIAccess().getPrintParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getIAccess().getConditionnelleParserRuleCall_4()); }
		ruleConditionnelle
		{ after(grammarAccess.getIAccess().getConditionnelleParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getIAccess().getTantqueParserRuleCall_5()); }
		ruleTantque
		{ after(grammarAccess.getIAccess().getTantqueParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__TAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getTBoolKeyword_0_0()); }
		'bool'
		{ after(grammarAccess.getTypeAccess().getTBoolKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getTIntKeyword_0_1()); }
		'int'
		{ after(grammarAccess.getTypeAccess().getTIntKeyword_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getTRatKeyword_0_2()); }
		'rat'
		{ after(grammarAccess.getTypeAccess().getTRatKeyword_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__E__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEAccess().getAppelParserRuleCall_0()); }
		ruleAppel
		{ after(grammarAccess.getEAccess().getAppelParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEAccess().getRationnelParserRuleCall_1()); }
		ruleRationnel
		{ after(grammarAccess.getEAccess().getRationnelParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getEAccess().getNumerateurParserRuleCall_2()); }
		ruleNumerateur
		{ after(grammarAccess.getEAccess().getNumerateurParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getEAccess().getDenominateurParserRuleCall_3()); }
		ruleDenominateur
		{ after(grammarAccess.getEAccess().getDenominateurParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getEAccess().getIdentificateurParserRuleCall_4()); }
		ruleIdentificateur
		{ after(grammarAccess.getEAccess().getIdentificateurParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getEAccess().getBooleanParserRuleCall_5()); }
		ruleBoolean
		{ after(grammarAccess.getEAccess().getBooleanParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getEAccess().getEntierParserRuleCall_6()); }
		ruleEntier
		{ after(grammarAccess.getEAccess().getEntierParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getEAccess().getOpBinParserRuleCall_7()); }
		ruleOpBin
		{ after(grammarAccess.getEAccess().getOpBinParserRuleCall_7()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__BAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanAccess().getBFalseKeyword_0_0()); }
		'false'
		{ after(grammarAccess.getBooleanAccess().getBFalseKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanAccess().getBTrueKeyword_0_1()); }
		'true'
		{ after(grammarAccess.getBooleanAccess().getBTrueKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operande__OpAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperandeAccess().getOpPlusSignKeyword_0_0()); }
		'+'
		{ after(grammarAccess.getOperandeAccess().getOpPlusSignKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getOperandeAccess().getOpEqualsSignKeyword_0_1()); }
		'='
		{ after(grammarAccess.getOperandeAccess().getOpEqualsSignKeyword_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getOperandeAccess().getOpAsteriskKeyword_0_2()); }
		'*'
		{ after(grammarAccess.getOperandeAccess().getOpAsteriskKeyword_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getOperandeAccess().getOpLessThanSignKeyword_0_3()); }
		'<'
		{ after(grammarAccess.getOperandeAccess().getOpLessThanSignKeyword_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prog__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prog__Group__0__Impl
	rule__Prog__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Prog__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgAccess().getFunAssignment_0()); }
	(rule__Prog__FunAssignment_0)*
	{ after(grammarAccess.getProgAccess().getFunAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prog__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prog__Group__1__Impl
	rule__Prog__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Prog__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
	{ after(grammarAccess.getProgAccess().getIDTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prog__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prog__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Prog__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgAccess().getBlocAssignment_2()); }
	(rule__Prog__BlocAssignment_2)
	{ after(grammarAccess.getProgAccess().getBlocAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Fun__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fun__Group__0__Impl
	rule__Fun__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunAccess().getTypeAssignment_0()); }
	(rule__Fun__TypeAssignment_0)
	{ after(grammarAccess.getFunAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fun__Group__1__Impl
	rule__Fun__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunAccess().getNomAssignment_1()); }
	(rule__Fun__NomAssignment_1)
	{ after(grammarAccess.getFunAccess().getNomAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fun__Group__2__Impl
	rule__Fun__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getFunAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fun__Group__3__Impl
	rule__Fun__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunAccess().getParamAssignment_3()); }
	(rule__Fun__ParamAssignment_3)*
	{ after(grammarAccess.getFunAccess().getParamAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fun__Group__4__Impl
	rule__Fun__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getFunAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fun__Group__5__Impl
	rule__Fun__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunAccess().getLeftCurlyBracketKeyword_5()); }
	'{'
	{ after(grammarAccess.getFunAccess().getLeftCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fun__Group__6__Impl
	rule__Fun__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunAccess().getIsAssignment_6()); }
	(rule__Fun__IsAssignment_6)*
	{ after(grammarAccess.getFunAccess().getIsAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fun__Group__7__Impl
	rule__Fun__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunAccess().getReturnKeyword_7()); }
	'return'
	{ after(grammarAccess.getFunAccess().getReturnKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fun__Group__8__Impl
	rule__Fun__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunAccess().getEAssignment_8()); }
	(rule__Fun__EAssignment_8)
	{ after(grammarAccess.getFunAccess().getEAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fun__Group__9__Impl
	rule__Fun__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunAccess().getSemicolonKeyword_9()); }
	';'
	{ after(grammarAccess.getFunAccess().getSemicolonKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fun__Group__10__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunAccess().getRightCurlyBracketKeyword_10()); }
	'}'
	{ after(grammarAccess.getFunAccess().getRightCurlyBracketKeyword_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Bloc__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bloc__Group__0__Impl
	rule__Bloc__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Bloc__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlocAccess().getBlocAction_0()); }
	()
	{ after(grammarAccess.getBlocAccess().getBlocAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bloc__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bloc__Group__1__Impl
	rule__Bloc__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Bloc__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlocAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getBlocAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bloc__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bloc__Group__2__Impl
	rule__Bloc__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Bloc__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlocAccess().getIsAssignment_2()); }
	(rule__Bloc__IsAssignment_2)*
	{ after(grammarAccess.getBlocAccess().getIsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bloc__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bloc__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Bloc__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlocAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getBlocAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Declaration__Group__0__Impl
	rule__Declaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclarationAccess().getTypeAssignment_0()); }
	(rule__Declaration__TypeAssignment_0)
	{ after(grammarAccess.getDeclarationAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Declaration__Group__1__Impl
	rule__Declaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclarationAccess().getNomAssignment_1()); }
	(rule__Declaration__NomAssignment_1)
	{ after(grammarAccess.getDeclarationAccess().getNomAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Declaration__Group__2__Impl
	rule__Declaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclarationAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getDeclarationAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Declaration__Group__3__Impl
	rule__Declaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclarationAccess().getEAssignment_3()); }
	(rule__Declaration__EAssignment_3)
	{ after(grammarAccess.getDeclarationAccess().getEAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Declaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclarationAccess().getSemicolonKeyword_4()); }
	';'
	{ after(grammarAccess.getDeclarationAccess().getSemicolonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Affectation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Affectation__Group__0__Impl
	rule__Affectation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAffectationAccess().getNomAssignment_0()); }
	(rule__Affectation__NomAssignment_0)
	{ after(grammarAccess.getAffectationAccess().getNomAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Affectation__Group__1__Impl
	rule__Affectation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAffectationAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getAffectationAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Affectation__Group__2__Impl
	rule__Affectation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAffectationAccess().getEAssignment_2()); }
	(rule__Affectation__EAssignment_2)
	{ after(grammarAccess.getAffectationAccess().getEAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Affectation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAffectationAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getAffectationAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Constante__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constante__Group__0__Impl
	rule__Constante__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constante__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstanteAccess().getConstKeyword_0()); }
	'const'
	{ after(grammarAccess.getConstanteAccess().getConstKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constante__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constante__Group__1__Impl
	rule__Constante__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Constante__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstanteAccess().getNomAssignment_1()); }
	(rule__Constante__NomAssignment_1)
	{ after(grammarAccess.getConstanteAccess().getNomAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constante__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constante__Group__2__Impl
	rule__Constante__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Constante__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstanteAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getConstanteAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constante__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constante__Group__3__Impl
	rule__Constante__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Constante__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstanteAccess().getEAssignment_3()); }
	(rule__Constante__EAssignment_3)
	{ after(grammarAccess.getConstanteAccess().getEAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constante__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constante__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constante__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstanteAccess().getSemicolonKeyword_4()); }
	';'
	{ after(grammarAccess.getConstanteAccess().getSemicolonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Print__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__0__Impl
	rule__Print__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getPrintKeyword_0()); }
	'print'
	{ after(grammarAccess.getPrintAccess().getPrintKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__1__Impl
	rule__Print__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getEAssignment_1()); }
	(rule__Print__EAssignment_1)
	{ after(grammarAccess.getPrintAccess().getEAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getSemicolonKeyword_2()); }
	';'
	{ after(grammarAccess.getPrintAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Conditionnelle__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditionnelle__Group__0__Impl
	rule__Conditionnelle__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionnelle__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionnelleAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getConditionnelleAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionnelle__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditionnelle__Group__1__Impl
	rule__Conditionnelle__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionnelle__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionnelleAccess().getEAssignment_1()); }
	(rule__Conditionnelle__EAssignment_1)
	{ after(grammarAccess.getConditionnelleAccess().getEAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionnelle__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditionnelle__Group__2__Impl
	rule__Conditionnelle__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionnelle__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionnelleAccess().getBloc1Assignment_2()); }
	(rule__Conditionnelle__Bloc1Assignment_2)
	{ after(grammarAccess.getConditionnelleAccess().getBloc1Assignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionnelle__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditionnelle__Group__3__Impl
	rule__Conditionnelle__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionnelle__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionnelleAccess().getElseKeyword_3()); }
	'else'
	{ after(grammarAccess.getConditionnelleAccess().getElseKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionnelle__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditionnelle__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionnelle__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionnelleAccess().getBloc2Assignment_4()); }
	(rule__Conditionnelle__Bloc2Assignment_4)
	{ after(grammarAccess.getConditionnelleAccess().getBloc2Assignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Tantque__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tantque__Group__0__Impl
	rule__Tantque__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tantque__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTantqueAccess().getWhileKeyword_0()); }
	'while'
	{ after(grammarAccess.getTantqueAccess().getWhileKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tantque__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tantque__Group__1__Impl
	rule__Tantque__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Tantque__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTantqueAccess().getEAssignment_1()); }
	(rule__Tantque__EAssignment_1)
	{ after(grammarAccess.getTantqueAccess().getEAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tantque__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tantque__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tantque__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTantqueAccess().getBlocAssignment_2()); }
	(rule__Tantque__BlocAssignment_2)
	{ after(grammarAccess.getTantqueAccess().getBlocAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DP__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DP__Group__0__Impl
	rule__DP__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DP__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDPAccess().getTypeAssignment_0()); }
	(rule__DP__TypeAssignment_0)
	{ after(grammarAccess.getDPAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DP__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DP__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DP__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDPAccess().getIdAssignment_1()); }
	(rule__DP__IdAssignment_1)
	{ after(grammarAccess.getDPAccess().getIdAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CP__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CP__Group__0__Impl
	rule__CP__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CP__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCPAccess().getCPAction_0()); }
	()
	{ after(grammarAccess.getCPAccess().getCPAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CP__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CP__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CP__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCPAccess().getEAssignment_1()); }
	(rule__CP__EAssignment_1)*
	{ after(grammarAccess.getCPAccess().getEAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Appel__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Appel__Group__0__Impl
	rule__Appel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Appel__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppelAccess().getCallKeyword_0()); }
	'call'
	{ after(grammarAccess.getAppelAccess().getCallKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Appel__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Appel__Group__1__Impl
	rule__Appel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Appel__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppelAccess().getNomAssignment_1()); }
	(rule__Appel__NomAssignment_1)
	{ after(grammarAccess.getAppelAccess().getNomAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Appel__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Appel__Group__2__Impl
	rule__Appel__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Appel__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppelAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getAppelAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Appel__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Appel__Group__3__Impl
	rule__Appel__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Appel__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppelAccess().getParamAssignment_3()); }
	(rule__Appel__ParamAssignment_3)
	{ after(grammarAccess.getAppelAccess().getParamAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Appel__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Appel__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Appel__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppelAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getAppelAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rationnel__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rationnel__Group__0__Impl
	rule__Rationnel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rationnel__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRationnelAccess().getLeftSquareBracketKeyword_0()); }
	'['
	{ after(grammarAccess.getRationnelAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rationnel__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rationnel__Group__1__Impl
	rule__Rationnel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rationnel__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRationnelAccess().getE1Assignment_1()); }
	(rule__Rationnel__E1Assignment_1)
	{ after(grammarAccess.getRationnelAccess().getE1Assignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rationnel__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rationnel__Group__2__Impl
	rule__Rationnel__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Rationnel__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRationnelAccess().getSolidusKeyword_2()); }
	'/'
	{ after(grammarAccess.getRationnelAccess().getSolidusKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rationnel__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rationnel__Group__3__Impl
	rule__Rationnel__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Rationnel__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRationnelAccess().getE2Assignment_3()); }
	(rule__Rationnel__E2Assignment_3)
	{ after(grammarAccess.getRationnelAccess().getE2Assignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rationnel__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rationnel__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rationnel__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRationnelAccess().getRightSquareBracketKeyword_4()); }
	']'
	{ after(grammarAccess.getRationnelAccess().getRightSquareBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Numerateur__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Numerateur__Group__0__Impl
	rule__Numerateur__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Numerateur__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumerateurAccess().getNumKeyword_0()); }
	'num'
	{ after(grammarAccess.getNumerateurAccess().getNumKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Numerateur__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Numerateur__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Numerateur__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumerateurAccess().getEAssignment_1()); }
	(rule__Numerateur__EAssignment_1)
	{ after(grammarAccess.getNumerateurAccess().getEAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Denominateur__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Denominateur__Group__0__Impl
	rule__Denominateur__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Denominateur__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDenominateurAccess().getDenomKeyword_0()); }
	'denom'
	{ after(grammarAccess.getDenominateurAccess().getDenomKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Denominateur__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Denominateur__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Denominateur__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDenominateurAccess().getEAssignment_1()); }
	(rule__Denominateur__EAssignment_1)
	{ after(grammarAccess.getDenominateurAccess().getEAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OpBin__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OpBin__Group__0__Impl
	rule__OpBin__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OpBin__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOpBinAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getOpBinAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OpBin__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OpBin__Group__1__Impl
	rule__OpBin__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OpBin__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOpBinAccess().getE1Assignment_1()); }
	(rule__OpBin__E1Assignment_1)
	{ after(grammarAccess.getOpBinAccess().getE1Assignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OpBin__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OpBin__Group__2__Impl
	rule__OpBin__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OpBin__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOpBinAccess().getOpAssignment_2()); }
	(rule__OpBin__OpAssignment_2)
	{ after(grammarAccess.getOpBinAccess().getOpAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OpBin__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OpBin__Group__3__Impl
	rule__OpBin__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__OpBin__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOpBinAccess().getE2Assignment_3()); }
	(rule__OpBin__E2Assignment_3)
	{ after(grammarAccess.getOpBinAccess().getE2Assignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OpBin__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OpBin__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OpBin__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOpBinAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getOpBinAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Prog__FunAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgAccess().getFunFunParserRuleCall_0_0()); }
		ruleFun
		{ after(grammarAccess.getProgAccess().getFunFunParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prog__BlocAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgAccess().getBlocBlocParserRuleCall_2_0()); }
		ruleBloc
		{ after(grammarAccess.getProgAccess().getBlocBlocParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunAccess().getTypeTypeParserRuleCall_0_0()); }
		ruleType
		{ after(grammarAccess.getFunAccess().getTypeTypeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__NomAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunAccess().getNomIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getFunAccess().getNomIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__ParamAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunAccess().getParamDPParserRuleCall_3_0()); }
		ruleDP
		{ after(grammarAccess.getFunAccess().getParamDPParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__IsAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunAccess().getIsIParserRuleCall_6_0()); }
		ruleI
		{ after(grammarAccess.getFunAccess().getIsIParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__EAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunAccess().getEEParserRuleCall_8_0()); }
		ruleE
		{ after(grammarAccess.getFunAccess().getEEParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bloc__IsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlocAccess().getIsIParserRuleCall_2_0()); }
		ruleI
		{ after(grammarAccess.getBlocAccess().getIsIParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclarationAccess().getTypeTypeParserRuleCall_0_0()); }
		ruleType
		{ after(grammarAccess.getDeclarationAccess().getTypeTypeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__NomAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclarationAccess().getNomIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDeclarationAccess().getNomIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__EAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclarationAccess().getEEParserRuleCall_3_0()); }
		ruleE
		{ after(grammarAccess.getDeclarationAccess().getEEParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__NomAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAffectationAccess().getNomIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getAffectationAccess().getNomIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__EAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAffectationAccess().getEEParserRuleCall_2_0()); }
		ruleE
		{ after(grammarAccess.getAffectationAccess().getEEParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constante__NomAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstanteAccess().getNomIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getConstanteAccess().getNomIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constante__EAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstanteAccess().getEINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getConstanteAccess().getEINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__EAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrintAccess().getEEParserRuleCall_1_0()); }
		ruleE
		{ after(grammarAccess.getPrintAccess().getEEParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionnelle__EAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionnelleAccess().getEEParserRuleCall_1_0()); }
		ruleE
		{ after(grammarAccess.getConditionnelleAccess().getEEParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionnelle__Bloc1Assignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionnelleAccess().getBloc1BlocParserRuleCall_2_0()); }
		ruleBloc
		{ after(grammarAccess.getConditionnelleAccess().getBloc1BlocParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionnelle__Bloc2Assignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionnelleAccess().getBloc2BlocParserRuleCall_4_0()); }
		ruleBloc
		{ after(grammarAccess.getConditionnelleAccess().getBloc2BlocParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tantque__EAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTantqueAccess().getEEParserRuleCall_1_0()); }
		ruleE
		{ after(grammarAccess.getTantqueAccess().getEEParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tantque__BlocAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTantqueAccess().getBlocBlocParserRuleCall_2_0()); }
		ruleBloc
		{ after(grammarAccess.getTantqueAccess().getBlocBlocParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DP__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDPAccess().getTypeTypeParserRuleCall_0_0()); }
		ruleType
		{ after(grammarAccess.getDPAccess().getTypeTypeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DP__IdAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDPAccess().getIdIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDPAccess().getIdIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__TAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getTAlternatives_0()); }
		(rule__Type__TAlternatives_0)
		{ after(grammarAccess.getTypeAccess().getTAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CP__EAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCPAccess().getEEParserRuleCall_1_0()); }
		ruleE
		{ after(grammarAccess.getCPAccess().getEEParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Appel__NomAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAppelAccess().getNomIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getAppelAccess().getNomIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Appel__ParamAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAppelAccess().getParamCPParserRuleCall_3_0()); }
		ruleCP
		{ after(grammarAccess.getAppelAccess().getParamCPParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rationnel__E1Assignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRationnelAccess().getE1EParserRuleCall_1_0()); }
		ruleE
		{ after(grammarAccess.getRationnelAccess().getE1EParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rationnel__E2Assignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRationnelAccess().getE2EParserRuleCall_3_0()); }
		ruleE
		{ after(grammarAccess.getRationnelAccess().getE2EParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Numerateur__EAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumerateurAccess().getEEParserRuleCall_1_0()); }
		ruleE
		{ after(grammarAccess.getNumerateurAccess().getEEParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Denominateur__EAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDenominateurAccess().getEEParserRuleCall_1_0()); }
		ruleE
		{ after(grammarAccess.getDenominateurAccess().getEEParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Identificateur__IdAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIdentificateurAccess().getIdIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getIdentificateurAccess().getIdIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__BAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanAccess().getBAlternatives_0()); }
		(rule__Boolean__BAlternatives_0)
		{ after(grammarAccess.getBooleanAccess().getBAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entier__IntAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEntierAccess().getIntINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getEntierAccess().getIntINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OpBin__E1Assignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpBinAccess().getE1EParserRuleCall_1_0()); }
		ruleE
		{ after(grammarAccess.getOpBinAccess().getE1EParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OpBin__OpAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpBinAccess().getOpOperandeParserRuleCall_2_0()); }
		ruleOperande
		{ after(grammarAccess.getOpBinAccess().getOpOperandeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OpBin__E2Assignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpBinAccess().getE2EParserRuleCall_3_0()); }
		ruleE
		{ after(grammarAccess.getOpBinAccess().getE2EParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operande__OpAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperandeAccess().getOpAlternatives_0()); }
		(rule__Operande__OpAlternatives_0)
		{ after(grammarAccess.getOperandeAccess().getOpAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
